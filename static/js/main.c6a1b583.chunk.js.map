{"version":3,"sources":["constants.js","components/Sidebar.js","components/Cell.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["Resolutions","XL","LG","MD","SM","SampleTypes","AVG","BLK","RED","GRN","BLU","MAG","CYN","YLW","WHT","Palettes","None","name","colors","Default","MC","ComputerCraft","Console","LEGO","Sidebar","props","Form","Group","Label","Control","as","value","resolution","onChange","event","setResolution","target","Object","keys","map","sampleType","setSampleType","paletteKey","setPalette","Cell","red","green","blue","color","redFloor","greenFloor","blueFloor","redCeiling","greenCeiling","console","log","blueCeiling","Math","floor","palette","length","x1","y1","z1","x2","y2","z2","closestColor","closestDistance","index","distance","parseInt","substring","sqrt","pow","findClosest","toString","rgbToHex","className","style","backgroundColor","App","random","defaultState","sidebarColor","state","floors","ceilings","cellSize","this","i","push","height","Container","Row","Col","xs","setState","blueIndex","greenIndex","redIndex","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAAaA,EAAc,CACzBC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,IAEOC,EAAc,CACzBC,IAAK,UACLC,IAAK,QACLC,IAAK,MACLC,IAAK,QACLC,IAAK,OACLC,IAAK,UACLC,IAAK,OACLC,IAAK,SACLC,IAAK,SAGMC,EAAW,CACtBC,KAAM,CACJC,KAAM,OACNC,OAAQ,IAEVC,QAAS,CACPF,KAAM,UACNC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJE,GAAI,CACFH,KAAM,YACNC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJG,cAAe,CACbJ,KAAM,gBACNC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJI,QAAS,CACPL,KAAM,aACNC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJK,KAAM,CACJN,KAAM,OACNC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,a,OCnHS,SAASM,EAAQC,GAC9B,OACE,8BACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,2BACA,cAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,SACHC,MAAON,EAAMO,WACbC,SAAU,SAACC,GACTT,EAAMU,cAAcD,EAAME,OAAOL,QAJrC,SAOGM,OAAOC,KAAKtC,GAAauC,KAAI,SAACP,GAC7B,OACE,wBAAyBD,MAAOC,EAAhC,SACGhC,EAAYgC,IADFA,WAOrB,eAACN,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,mCACA,cAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,SACHC,MAAON,EAAMe,WACbP,SAAU,SAACC,GAAD,OAAWT,EAAMgB,cAAc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","file":"static/js/main.c6a1b583.chunk.js","sourcesContent":["export const Resolutions = {\r\n  XL: 2,\r\n  LG: 4,\r\n  MD: 8,\r\n  SM: 16,\r\n};\r\nexport const SampleTypes = {\r\n  AVG: \"Average\",\r\n  BLK: \"Black\",\r\n  RED: \"Red\",\r\n  GRN: \"Green\",\r\n  BLU: \"Blue\",\r\n  MAG: \"Magenta\",\r\n  CYN: \"Cyan\",\r\n  YLW: \"Yellow\",\r\n  WHT: \"White\",\r\n};\r\n\r\nexport const Palettes = {\r\n  None: {\r\n    name: \"None\",\r\n    colors: [],\r\n  },\r\n  Default: {\r\n    name: \"Default\",\r\n    colors: [\r\n      \"#000000\",\r\n      \"#FF0000\",\r\n      \"#00FF00\",\r\n      \"#0000FF\",\r\n      \"#FFFF00\",\r\n      \"#FF00FF\",\r\n      \"#00FFFF\",\r\n      \"#FFFFFF\",\r\n      \"#888888\",\r\n    ],\r\n  },\r\n  MC: {\r\n    name: \"Minecraft\",\r\n    colors: [\r\n      \"#f9ffff\",\r\n      \"#9c9d97\",\r\n      \"#474f52\",\r\n      \"#1d1c21\",\r\n      \"#ffd83d\",\r\n      \"#f9801d\",\r\n      \"#b02e26\",\r\n      \"#825432\",\r\n      \"#80c71f\",\r\n      \"#5d7c15\",\r\n      \"#3ab3da\",\r\n      \"#169c9d\",\r\n      \"#3c44a9\",\r\n      \"#f38caa\",\r\n      \"#c64fbd\",\r\n      \"#8932b7\",\r\n    ],\r\n  },\r\n  ComputerCraft: {\r\n    name: \"ComputerCraft\",\r\n    colors: [\r\n      \"#F0F0F0\",\r\n      \"#F2B233\",\r\n      \"#E57FD8\",\r\n      \"#99B2F2\",\r\n      \"#DEDE6C\",\r\n      \"#7FCC19\",\r\n      \"#F2B2CC\",\r\n      \"#4C4C4C\",\r\n      \"#999999\",\r\n      \"#4C99B2\",\r\n      \"#B266E5\",\r\n      \"#3366CC\",\r\n      \"#7F664C\",\r\n      \"#57A64E\",\r\n      \"#CC4C4C\",\r\n      \"#191919\",\r\n    ],\r\n  },\r\n  Console: {\r\n    name: \"C# Console\",\r\n    colors: [\r\n      \"#000000\",\r\n      \"#000080\",\r\n      \"#008000\",\r\n      \"#008080\",\r\n      \"#800000\",\r\n      \"#012456\",\r\n      \"#EEEDF0\",\r\n      \"#C0C0C0\",\r\n      \"#808080\",\r\n      \"#0000FF\",\r\n      \"#00FF00\",\r\n      \"#00FFFF\",\r\n      \"#FF0000\",\r\n      \"#FF00FF\",\r\n      \"#FFFF00\",\r\n      \"#FFFFFF\",\r\n    ],\r\n  },\r\n  LEGO: {\r\n    name: \"LEGO\",\r\n    colors: [\r\n      \"#05131D\",\r\n      \"#FFFFFF\",\r\n      \"#A0A5A9\",\r\n      \"#C91A09\",\r\n      \"#6C6E68\",\r\n      \"#F2CD37\",\r\n      \"#0055BF\",\r\n      \"#9BA19D\",\r\n      \"#582A12\",\r\n      \"#E4CD9E\",\r\n      \"#237841\",\r\n      \"#FE8A18\",\r\n      \"#BBE90B\",\r\n      \"#6D6E5C\",\r\n      \"#0A3463\",\r\n      \"#958A73\",\r\n    ],\r\n  },\r\n};\r\n","import { Form } from \"react-bootstrap\";\r\nimport { Resolutions, SampleTypes, Palettes } from \"../constants\";\r\n\r\nexport default function Sidebar(props) {\r\n  return (\r\n    <div>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>Resolution: </Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            value={props.resolution}\r\n            onChange={(event) => {\r\n              props.setResolution(event.target.value);\r\n            }}\r\n          >\r\n            {Object.keys(Resolutions).map((resolution) => {\r\n              return (\r\n                <option key={resolution} value={resolution}>\r\n                  {Resolutions[resolution]}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Err (Sample Point): </Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            value={props.sampleType}\r\n            onChange={(event) => props.setSampleType(event.target.value)}\r\n          >\r\n            {Object.keys(SampleTypes).map((sampleType) => {\r\n              return (\r\n                <option key={sampleType} value={sampleType}>\r\n                  {SampleTypes[sampleType]}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Palette: </Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            value={props.paletteKey}\r\n            onChange={(event) => props.setPalette(event.target.value)}\r\n          >\r\n            {Object.keys(Palettes).map((paletteKey) => {\r\n              return (\r\n                <option key={paletteKey} value={paletteKey}>\r\n                  {Palettes[paletteKey].name}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Control>\r\n        </Form.Group>\r\n\r\n        {/* TODO: ADD COLORS TO PALETTE */}\r\n\r\n        {/* TODO: EDIT COLORS IN PALETTE */}\r\n\r\n        {/* TODO: REMOVE COLORS FROM PALETTE */}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","/*\r\nredFloor\r\ngreenFloor\r\nblueFloor\r\nredCeiling\r\ngreenCeiling\r\nblueCeiling\r\nsampleType\r\npalette\r\napplyPalette\r\n*/\r\nimport { SampleTypes } from \"../constants\";\r\nimport { rgbToHex, findClosest } from \"../utils\";\r\n\r\nexport default function Cell(props) {\r\n  let red, green, blue, color;\r\n  switch (SampleTypes[props.sampleType]) {\r\n    case SampleTypes.BLK:\r\n      red = props.redFloor;\r\n      green = props.greenFloor;\r\n      blue = props.blueFloor;\r\n      break;\r\n    case SampleTypes.RED:\r\n      red = props.redCeiling;\r\n      green = props.greenFloor;\r\n      blue = props.blueFloor;\r\n      break;\r\n    case SampleTypes.GRN:\r\n      red = props.redFloor;\r\n      green = props.greenCeiling;\r\n      blue = props.blueFloor;\r\n      break;\r\n    case SampleTypes.BLU:\r\n      console.log(\"BLUE!!!\");\r\n      red = props.redFloor;\r\n      green = props.greenFloor;\r\n      blue = props.blueCeiling;\r\n      break;\r\n    case SampleTypes.MAG:\r\n      red = props.redCeiling;\r\n      green = props.greenFloor;\r\n      blue = props.blueCeiling;\r\n      break;\r\n    case SampleTypes.CYN:\r\n      red = props.redFloor;\r\n      green = props.greenCeiling;\r\n      blue = props.blueCeiling;\r\n      break;\r\n    case SampleTypes.YLW:\r\n      red = props.redCeiling;\r\n      green = props.greenCeiling;\r\n      blue = props.blueFloor;\r\n      break;\r\n    case SampleTypes.WHT:\r\n      red = props.redCeiling;\r\n      green = props.greenCeiling;\r\n      blue = props.blueCeiling;\r\n      break;\r\n    case SampleTypes.AVG:\r\n    default:\r\n      red = Math.floor((props.redCeiling + props.redFloor) / 2);\r\n      green = Math.floor((props.greenCeiling + props.greenFloor) / 2);\r\n      blue = Math.floor((props.blueCeiling + props.blueFloor) / 2);\r\n      break;\r\n  }\r\n  if (props.palette.length !== 0) {\r\n    color = findClosest(red, green, blue, props.palette);\r\n  } else {\r\n    color = rgbToHex(red, green, blue);\r\n  }\r\n  return <div className=\"cell\" style={{ backgroundColor: color }}></div>;\r\n}\r\n","export const rgbToHex = (red, green, blue) => {\r\n  return (\r\n    \"#\" +\r\n    (red < 16 ? \"00\" : red.toString(16)) +\r\n    (green < 16 ? \"00\" : green.toString(16)) +\r\n    (blue < 16 ? \"00\" : blue.toString(16))\r\n  );\r\n};\r\n\r\nexport const findClosest = (red, green, blue, palette) => {\r\n  let closestColor = palette[0];\r\n  let closestDistance = 99999999;\r\n  for (let index in palette) {\r\n    const color = palette[index];\r\n    const thisRed = parseInt(\"0x\" + color.substring(1, 3));\r\n    const thisGreen = parseInt(\"0x\" + color.substring(3, 5));\r\n    const thisBlue = parseInt(\"0x\" + color.substring(5, 7));\r\n\r\n    const distance = getDistance(\r\n      red,\r\n      green,\r\n      blue,\r\n      thisRed,\r\n      thisGreen,\r\n      thisBlue\r\n    );\r\n    if (distance < closestDistance) {\r\n      closestDistance = distance;\r\n      closestColor = color;\r\n    }\r\n  }\r\n  return closestColor;\r\n};\r\n\r\nfunction getDistance(x1, y1, z1, x2, y2, z2) {\r\n  return Math.sqrt(\r\n    Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2)\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Sidebar from \"./components/Sidebar\";\nimport Cell from \"./components/Cell\";\nimport React from \"react\";\nimport { Resolutions, Palettes } from \"./constants\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const red = 16 + Math.floor(Math.random() * 220);\n    const green = 16 + Math.floor(Math.random() * 220);\n    const blue = 16 + Math.floor(Math.random() * 220);\n    const sidebarColor =\n      \"#\" + red.toString(16) + green.toString(16) + blue.toString(16);\n\n    const defaultState = {\n      resolution: \"MD\",\n      sampleType: \"AVG\",\n      paletteKey: \"Default\",\n      sidebarColor,\n    };\n\n    this.state = defaultState;\n  }\n\n  render() {\n    // TODO: Cell size varies with resolution\n\n    const floors = [];\n    const ceilings = [];\n    const resolution = Resolutions[this.state.resolution];\n    const cellSize = 256 / resolution;\n    for (let i = 0; i <= 256 - cellSize; i += cellSize) {\n      floors.push(i);\n      ceilings.push(i + cellSize - 1);\n    }\n\n    return (\n      <div className=\"App\" style={{ height: \"100vh\" }}>\n        <Container className=\"h-100 fullwidth\">\n          <Row className=\"h-100\">\n            <Col xs={3} style={{ backgroundColor: this.state.sidebarColor }}>\n              <Sidebar\n                resolution={this.state.resolution}\n                sampleType={this.state.sampleType}\n                paletteKey={this.state.paletteKey}\n                setResolution={(resolution) => {\n                  this.setState({ resolution });\n                }}\n                setSampleType={(sampleType) => {\n                  this.setState({ sampleType });\n                }}\n                setPalette={(paletteKey) => {\n                  console.log(\"Set palette\");\n                  this.setState({ paletteKey });\n                }}\n              />\n            </Col>\n            <Col xs={9}>\n              {floors.map((blueFloor, blueIndex) => {\n                // Layers (Blue axis)\n                const blueCeiling = ceilings[blueIndex];\n                return (\n                  <div className=\"layer\" key={\"blue\" + blueIndex}>\n                    {floors.map((greenFloor, greenIndex) => {\n                      // Cell Rows (Green axis)\n                      const greenCeiling = ceilings[greenIndex];\n                      return (\n                        <div className=\"cellRow\" key={\"green\" + greenIndex}>\n                          {floors.map((redFloor, redIndex) => {\n                            // Cells (Red axis)\n                            const redCeiling = ceilings[redIndex];\n                            return (\n                              <Cell\n                                key={\"red\" + redIndex}\n                                redFloor={redFloor}\n                                greenFloor={greenFloor}\n                                blueFloor={blueFloor}\n                                redCeiling={redCeiling}\n                                greenCeiling={greenCeiling}\n                                blueCeiling={blueCeiling}\n                                sampleType={this.state.sampleType}\n                                palette={Palettes[this.state.paletteKey].colors}\n                              />\n                            );\n                          })}\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}